// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String
  emailVerified      DateTime?
  username           String
  password           String
  role               userRole             @default(USER)
  image              String?
  background         String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  sessions           Session[]
  Thread             Thread[]
  ThreadPost         ThreadPost[]
  Comments           Comments[]
  CommentReactions   CommentReactions[]
  UserProfileComment UserProfileComment[] @relation("UserProfileComments")
  UserLibrary        UserLibrary[]
}

enum userRole {
  USER
  UPLOADER
  MOD
  ADMIN
}

model UserLibrary {
  id           Int     @id @default(autoincrement())
  bookmark     Boolean
  notification Boolean
  status       Int     @default(0)
  rating       Int?
  userId       String
  serieID      Int
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  serie        Serie   @relation(references: [id], fields: [serieID], onDelete: Cascade)
}

model UserReadHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userID    String
  chapterID String
  chapter   Chapter  @relation(references: [id], fields: [chapterID], onDelete: Cascade)
}

// VIEWS //

model ViewLog {
  id         Int      @id @default(autoincrement())
  views      Int      @default(0)
  type       String // 'daily', 'weekly', 'monthly'
  createdAt  DateTime @default(now())
  expiryDate DateTime
  serieID    Int
  serie      Serie    @relation(fields: [serieID], references: [id], onDelete: Cascade)

  @@unique([serieID, type, expiryDate])
}

// SERIE //

model Serie {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String
  synopsis    String
  description String?
  status      Int
  adult       Boolean       @default(false)
  posterImage String?
  coverImage  String?
  type        SerieType // Novel | Manga -> image or text
  subtype     SerieSubtype // Subtype
  views       Int           @default(0)
  releasedAt  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  titles      Title[]
  genres      Genre[]       @relation("GenreToSerie")
  authors     Author[]      @relation("AuthorToSerie")
  tags        Tag[]         @relation("TagToSerie")
  chapters    Chapter[]
  Comments    Comments[]
  ViewLog     ViewLog[]
  UserLibrary UserLibrary[]
}

enum SerieType {
  NOVEL
  MANGA
}

enum SerieSubtype {
  MANGA
  MANHWA
  MANHUA
  WEBTOON
  COMIC
  WEBNOVEL
  LIGHTNOVEL
}

model Chapter {
  id              String             @id @default(uuid())
  title           String
  index           Float
  volume          Float              @default(0)
  type            ChapterContentType
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now()) @updatedAt
  views           Int                @default(0)
  serieID         Int
  serie           Serie?             @relation(fields: [serieID], references: [id], onDelete: Cascade)
  content         ChapterContent?
  UserReadHistory UserReadHistory[]
  Comments        Comments[]
}

model ChapterContent {
  id        String             @id @default(uuid())
  type      ChapterContentType
  text      String?
  pages     Page[]
  chapterID String             @unique
  chapter   Chapter            @relation(fields: [chapterID], references: [id], onDelete: Cascade)
}

model Page {
  id               String          @id @default(uuid())
  imageURL         String
  order            Int
  width            Int
  height           Int
  fileSize         Int
  chapterContentId String?
  ChapterContent   ChapterContent? @relation(fields: [chapterContentId], references: [id], onDelete: Cascade)
}

enum ChapterContentType {
  NOVEL
  MANGA
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  series Serie[] @relation("GenreToSerie")
}

model Author {
  id     String  @id @default(uuid())
  name   String  @unique
  series Serie[] @relation("AuthorToSerie")
}

model Tag {
  id     String  @id @default(uuid())
  name   String  @unique
  series Serie[] @relation("TagToSerie")
}

model Title {
  id      String @id @default(uuid())
  title   String
  type    String
  serieID Int
  serie   Serie  @relation(fields: [serieID], references: [id])
}

// COMMENTS //

model Comments {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com o autor do comentário
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relacionamento com Série
  serieID Int?
  serie   Serie? @relation(fields: [serieID], references: [id])

  // Relacionamento com Capítulo
  chapterID String?
  chapter   Chapter? @relation(fields: [chapterID], references: [id])

  // Comentários em resposta a outros comentários
  parentID String?
  parent   Comments?  @relation("ParentComments", fields: [parentID], references: [id])
  replies  Comments[] @relation("ParentComments")

  // Reações ao comentário
  CommentReactions   CommentReactions[]
  UserProfileComment UserProfileComment[]
}

model UserProfileComment {
  id            String   @id @default(uuid())
  profileUserId String // ID do usuário cujo perfil está sendo comentado
  profileUser   User     @relation("UserProfileComments", fields: [profileUserId], references: [id], onDelete: Cascade)
  commentId     String // ID do comentário associado ao perfil
  comment       Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model CommentReactions {
  id           String       @id @default(uuid())
  commentId    String
  comment      Comments     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactionType ReactionType // Define se é um "like" ou "dislike"
  createdAt    DateTime     @default(now())

  @@unique([commentId, userId]) // Garante que cada usuário possa reagir apenas uma vez por comentário
}

enum ReactionType {
  LIKE
  DISLIKE
}

// F O R U M //

model Forum {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  allowTopics Boolean  @default(true)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento com Category
  categoryId String?
  category   ForumCategory? @relation(fields: [categoryId], references: [id])

  // Recursividade
  parentForumId Int?
  parentForum   Forum?  @relation("ParentToChildren", fields: [parentForumId], references: [id])
  subForums     Forum[] @relation("ParentToChildren")

  threads Thread[]
}

model ForumCategory {
  id       String  @id @default(uuid())
  name     String  @unique
  position Int     @default(0)
  forums   Forum[] // Fóruns associados a essa categoria
}

model Thread {
  id        String       @id @default(uuid())
  title     String
  isPinned  Boolean      @default(false) // Identifica se o tópico está fixado
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  forumId   Int
  forum     Forum        @relation(fields: [forumId], references: [id])
  posts     ThreadPost[]
  userId    String
  user      User         @relation(fields: [userId], references: [id])
}

model ThreadPost {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com User
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Relacionamento com Thread
  threadId String
  thread   Thread @relation(fields: [threadId], references: [id])

  // Citação de outro post
  quotedPostId String?
  quotedPost   ThreadPost?  @relation("PostCitation", fields: [quotedPostId], references: [id])
  citingPosts  ThreadPost[] @relation("PostCitation") // Posts que citam este post
}
